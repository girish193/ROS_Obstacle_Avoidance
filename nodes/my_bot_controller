#!/usr/bin/env python

import rospy
import math
import sys
import tf
from velocity_publisher import computation

from geometry_msgs.msg import Twist, Point
from sensor_msgs.msg import LaserScan
from tf.transformations import euler_from_quaternion

# Initialize your ROS node
rospy.init_node("move_robot")
# Set up a publisher to the /cmd_vel topic
pub = rospy.Publisher("cmd_vel", Twist, queue_size=5)
# Declare a message of type Twist
velocity_msg = Twist()
# publish the velocity at 4 Hz (4 times per second)
rate = rospy.Rate(4)
# set up a tf listener to retrieve transform between the robot and the world
tf_listener = tf.TransformListener()
# parent frame for the listener
parent_frame = 'odom'
# child frame for the listener
child_frame = 'base_footprint'
# gains for the proportional controllers. These values can be tuned.
k_h_gain = 1
k_v_gain = 1

try:
    tf_listener.waitForTransform(parent_frame, child_frame, rospy.Time(), rospy.Duration(1.0))
except (tf.Exception, tf.ConnectivityException, tf.LookupException):
    rospy.loginfo("Cannot find transform between {p} and {c}".format(p=parent_frame, c=child_frame))
    rospy.signal_shutdown("tf Exception")

def go_straight():
    """Move the robot in a straight line until it has driven a certain distance.

    The linear velocity is modified for a Twist message and then published on /cmd_vel.

    """

    # get distance and linear velocity from command line
    distance_to_drive, linear_velocity = 0.1, 0.1
    global velocity_msg
    # update linear.x from the command line
    velocity_msg.linear.x = linear_velocity
    # get the current time (s)
    t_0 = rospy.Time.now().to_sec()
    # keep track of the distance
    distance_moved = 0.0

    # while the amount of distance has not been reached
    while distance_moved <= distance_to_drive:
        rospy.loginfo("TurtleBot is moving")
        pub.publish(velocity_msg)
        rate.sleep()
        # time in sec in the loop
        t_1 = rospy.Time.now().to_sec()
        distance_moved = (t_1 - t_0) * abs(linear_velocity)
        rospy.loginfo("distance moved: {d}".format(d=distance_moved))

    rospy.logwarn("Distance reached")
    # finally, stop the robot when the distance is moved
    velocity_msg.linear.x = 0.0
    velocity_msg.angular.z = 0.0
    pub.publish(velocity_msg)


def get_odom_data():
    """Get the current pose of the robot from the /odom topic

    Return
    ----------
    The position (x, y, z) and the yaw of the robot.

    """
    try:
        (trans, rot) = tf_listener.lookupTransform(parent_frame, child_frame, rospy.Time(0))
        # rotation is a list [r, p, y]
        rotation = euler_from_quaternion(rot)
    except (tf.Exception, tf.ConnectivityException, tf.LookupException):
        rospy.loginfo("TF Exception")
        return
    # return the position (x, y, z) and the yaw
    return Point(*trans), rotation[2]


def get_goal():
    """Get goal arguments from the command line

    The first argument is the x coordinate.
    The second argument is the y coordinate.

    Return
    ----------
    The goal (x, y) to reach.
    """

    x = int(sys.argv[1])
    if x == 0:
        return -2,0
    elif x== 1:
        return -1, 2
    elif x==2:
        return 1,2
    elif x== 3:
        return 2,0
    elif x== 4:
        return 1,-2
    elif x== 5:
        return -1,-2
    else:
        sys.exit('Not enough arguments')



def go_to_goal(range):
    """Task the robot to reach a goal (x,y) using a proportional controller.

    The current pose of the robot is retrieved from /odom topic.
    Publish the message to /cmd_vel topic.


    """

    # get current pose of the robot from the /odom topic
    (position, rotation) = get_odom_data()
    last_rotation = 0
    # get the goal to reach from arguments passed to the command line
    goal_x, goal_y = get_goal()
    # compute the distance from the current position to the goal
    distance_to_goal = computation.compute_distance(position.x, position.y, goal_x, goal_y)
    flag = True
    while distance_to_goal > 0.05 and flag == True:

        if (range["center"] < 0.5):
            case = 'OBSTACLE CENTER !'
            rospy.loginfo(case)
            # if (range["centerLeft"] < 0.4):
            #     case = 'OBSTACLE CENTER Left!'
            #     rospy.loginfo(case)
            #     velocity_msg.linear.x = 0
            #     velocity_msg.angular.z = 0.1
            #     flag = False
            # elif (range["centerRight"] < 0.4):
            #     case = 'OBSTACLE CENTER Left!'
            #     rospy.loginfo(case)
            #     velocity_msg.linear.x = 0
            #     velocity_msg.angular.z = 0.1
            #     flag = False

            velocity_msg.linear.x = 0
            velocity_msg.angular.z = -0.3

            pub.publish(velocity_msg)

            flag = False


        elif(range["right"]<0.3):
            case = 'OBSTACLE Right!'
            rospy.loginfo(case)

            velocity_msg.linear.x = 0.1
            velocity_msg.angular.z = 0

            pub.publish(velocity_msg)

            flag = False
        #
        elif (range["left"] < 0.3):
            case = 'OBSTACLE Left'
            rospy.loginfo(case)
            velocity_msg.linear.x = 0.1
            velocity_msg.angular.z = 0

            pub.publish(velocity_msg)

            flag = False

        elif (range["center"] > 0.5):
            case = 'NO OBSTACLE!'
            rospy.loginfo(case)

            (position, rotation) = get_odom_data()
            x_start = position.x
            y_start = position.y
            rospy.loginfo("x = {0}, y = {1}".format(x_start, y_start))
            angle_to_goal = math.atan2(goal_y - y_start, goal_x - x_start)

            # the domain of arctan(x) is (-inf, inf)
            # we would like to restrict the domain to (0, 2pi)
            if angle_to_goal < -math.pi / 4 or angle_to_goal > math.pi / 4:

                if 0 > goal_y > y_start:
                    angle_to_goal = -2 * math.pi + angle_to_goal
                    print("1", angle_to_goal)
                elif 0 <= goal_y < y_start:
                    angle_to_goal = 2 * math.pi + angle_to_goal
                    print("2",angle_to_goal)
            if last_rotation > math.pi - 0.1 and rotation <= 0:
                rotation = 2 * math.pi + rotation
            elif last_rotation < -math.pi + 0.1 and rotation > 0:
                rotation = -2 * math.pi + rotation
            print("3", rotation, angle_to_goal)
            # proportional control for rotating the robot
            velocity_msg.angular.z = k_v_gain * angle_to_goal - rotation

            distance_to_goal = computation.compute_distance(position.x, position.y, goal_x, goal_y)
            # proportional control to move the robot forward
            # We will drive the robot at a maximum speed of 0.5
            velocity_msg.linear.x = min(k_h_gain * distance_to_goal, 0.1)

            #set the z angular velocity for positive and negative rotations
            if velocity_msg.angular.z > 0:
                velocity_msg.angular.z = min(velocity_msg.angular.z, 1.5)
            else:
                velocity_msg.angular.z = max(velocity_msg.angular.z, -1.5)

            # update the new rotation for the next loop
            last_rotation = rotation

            pub.publish(velocity_msg)
            #rate.sleep()

            flag = False

    # force the robot to stop by setting linear and angular velocities to 0
    if(distance_to_goal < 0.05):
        velocity_msg.linear.x = 0.0
        velocity_msg.angular.z = 0.0
        # publish the new message on /cmd_vel topic
        pub.publish(velocity_msg)


def sensor_callback(msg):
    """Callback function to deal with messages on the /scan topic

    """
    range={
        "right" : min(min(msg.ranges[45:75]), 2),
        "center" : min(min(msg.ranges[335:359]), min(msg.ranges[0:25]),2),
        "centerRight" :  min(min(msg.ranges[315:335]),2),
        "centerLeft": min(min(msg.ranges[25:45]), 2),
        "left" : min(min(msg.ranges[270:315]), 2)
    }
    go_to_goal(range)

    # todo for the assignment.
    # Call other functions to do obstacle avoidance here
    # print("0:45",msg.ranges[0:45])
    # print("315:349",msg.ranges[315:359])
    # print("Min 0:45", min(msg.ranges[0:45]))
    # print("Min 315:359", min(msg.ranges[315:359]))
    # print("Min in range );45, 315:359", min(min(msg.ranges[0:45]),min(msg.ranges[315:359]),2))
    #
    # print(range["right"])
    # print(range["center"])
    # print(range["left"])

    # if (range["center"] > 0.2):
    #     case = 'NO OBSTACLE!'
    #     linearx = 0.1
    #     angularz = 0
    # if (range["center"] < 0.2):
    #     case = 'OBSTACLE CENTER!'
    #     linearx = 0
    #     angularz = -0.01
    # elif (range["right"] > 0.2 and range["center"] < 0.2 and range["left"] < 0.2):
    #     case = 'OBSTACLE CENTER AND LEFT!'
    #     linearx = 0
    #     angularz = -0.01
    #
    # elif (range["right"] < 0.2 and range["center"] < 0.2 and range["left"] > 0.2):
    #     case = 'OBSTACLE CENTER AND RIGHT!'
    #     linearx = 0
    #     angularz = 0.01
    # elif (range["right"] < 0.2 and range["center"] < 0.2 and range["left"] < 0.2):
    #     case = 'OBSTACLE AHEAD!'
    #     linearx = -0.1
    #     angularz = 0
    #
    # rospy.loginfo(case)
    # velocity_msg.linear.x = linearx
    # velocity_msg.angular.z = angularz
    # pub.publish(velocity_msg)


def read_scan():
    """Set up a subscriber for the scan topic

    """
    rospy.Subscriber("scan", LaserScan, sensor_callback)
    rospy.spin()


# Run the following is this file is called from the package bot_controller
# rosrun bot_controller my_bot_controller <arguments>
if __name__ == "__main__":
    while not rospy.is_shutdown():
        read_scan()



